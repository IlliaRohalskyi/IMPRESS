name: Test and Deploy

on:
  push:
    branches:
      - main

jobs:
  container:
    runs-on: ubuntu-20.04
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      DB_HOSTNAME: ${{ secrets.DB_HOSTNAME }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
      DVC_TOKEN: ${{ secrets.DVC_TOKEN }}
      DVC_USERNAME: ${{ secrets.DVC_USERNAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      ECR_ACCOUNT_ID: ${{ secrets.ECR_ACCOUNT_ID }}
      ECR_IMAGE_NAME_1: monitoring-image
      ECR_IMAGE_NAME_2: prediction-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.10'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run tests
      run: pytest tests

    - name: Run linting
      run: |
        pylint src tests

    - name: Download ML models
      run: python src/components/model_loader.py

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Capture Git commit SHA
      id: git_sha
      run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

    - name: Build and push Docker image (Monitoring)
      id: monitoring-docker
      run: |
        docker build -t $ECR_IMAGE_NAME_1:${{ steps.git_sha.outputs.sha }} -f Dockerfile-monitoring .
        docker tag $ECR_IMAGE_NAME_1:${{ steps.git_sha.outputs.sha }} $ECR_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/impress:$ECR_IMAGE_NAME_1-${{ steps.git_sha.outputs.sha }}
        docker push $ECR_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/impress:$ECR_IMAGE_NAME_1-${{ steps.git_sha.outputs.sha }}
        echo "image=$ECR_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/impress:$ECR_IMAGE_NAME_1-${{ steps.git_sha.outputs.sha }}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image (Prediction)
      id: prediction-docker
      run: |
        docker build -t $ECR_IMAGE_NAME_2:${{ steps.git_sha.outputs.sha }} -f Dockerfile-prediction .
        docker tag $ECR_IMAGE_NAME_2:${{ steps.git_sha.outputs.sha }} $ECR_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/impress:$ECR_IMAGE_NAME_2-${{ steps.git_sha.outputs.sha }}
        docker push $ECR_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/impress:$ECR_IMAGE_NAME_2-${{ steps.git_sha.outputs.sha }}
        echo "image=$ECR_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/impress:$ECR_IMAGE_NAME_2-${{ steps.git_sha.outputs.sha }}" >> $GITHUB_OUTPUT

    - name: Download Task Definitions
      run: |
        aws ecs describe-task-definition --task-definition impress-monitoring --query taskDefinition > impress-monitoring.json
        aws ecs describe-task-definition --task-definition impress-prediction --query taskDefinition > impress-prediction.json

    - name: Fill in the new image ID in the Amazon ECS task definition (Monitoring)
      id: task-def-monitoring
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: impress-monitoring.json
        container-name: monitoring
        image: ${{ steps.monitoring-docker.outputs.image }}
    
    - name: Fill in the new image ID in the Amazon ECS task definition (Prediction)
      id: task-def-prediction
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: impress-prediction.json
        container-name: prediction
        image: ${{ steps.prediction-docker.outputs.image }}
    
    - name: Deploy Amazon ECS task definition (Monitoring)
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-monitoring.outputs.task-definition }}
        wait-for-service-stability: true
        cluster: IMPRESS
      
    - name: Deploy Amazon ECS task definition (Prediction)
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-prediction.outputs.task-definition }}
        wait-for-service-stability: true
        cluster: IMPRESS